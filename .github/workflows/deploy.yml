name: Deploy prod-template API

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy-go-app:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.23

    - name: Build the Go application
      run: |
        GOOS=linux GOARCH=amd64 go build -o ./bin/prod-template ./cmd/api/main.go
        GOOS=linux GOARCH=amd64 go build -o ./bin/migrate ./cmd/migration/main.go

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Copy the binary to the production server
      run: |
        scp -o StrictHostKeyChecking=no ./bin/prod-template ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }}:/usr/local/bin/prod-template

    - name: Copy the migration binary to the production server
      run: |
        scp -o StrictHostKeyChecking=no ./bin/migrate ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }}:/usr/local/bin/migrate

    - name: Remove existing environment file
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }} '
          rm -f /etc/prod-template/.env
        '

    - name: Create and export secrets to environment file
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }} '
          mkdir -p /etc/prod-template && \
          echo "HOST=${{ secrets.HOST }}" >> /etc/prod-template/.env && \
          echo "PORT=${{ secrets.PORT }}" >> /etc/prod-template/.env && \
          echo "MY_SECRET=${{ secrets.MY_SECRET }}" >> /etc/prod-template/.env
        '

    - name: Stop Systemd Service
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }} '
          if systemctl is-active --quiet prod-template; then
              echo "Service is active. Stopping the service..."
              sudo systemctl stop prod-template
          else
              echo "Service is inactive or does not exist. No action needed."
          fi
        '

    - name: Find Latest Migration in Git Repo
      run: |
        latest=$(ls ./migrations/*.sql 2>/dev/null | sort | tail -n 1)
        latest_filename=$(basename "$latest")
        
        if [ -z "$latest_filename" ]; then
          echo "No migration files found in the ./migrations directory."
          exit 1
        else
          echo "Latest migration file: $latest_filename"
          echo "LATEST_MIGRATION_FILE=$latest_filename" >> $GITHUB_ENV
        fi

    - name: Ensure Migrations Directory exists
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }} '
          mkdir -p /etc/prod-template/migrations
        '

    - name: Copy Migration Files
      run: |
        scp -o StrictHostKeyChecking=no -r ./migrations ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }}:/etc/prod-template/

    - name: Run Migration on Production Server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }} '
          export PSQL_HOST="${{ secrets.PSQL_HOST }}"
          export PSQL_PORT="${{ secrets.PSQL_PORT }}"
          export PSQL_USER="${{ secrets.PSQL_USER }}"
          export PSQL_PASSWORD="${{ secrets.PSQL_PASSWORD }}"
          export PSQL_DBNAME="${{ secrets.PSQL_DBNAME }}"
          export PSQL_SSLMODE="${{ secrets.PSQL_SSLMODE }}"

          /usr/local/bin/migrate --version "${{ env.LATEST_MIGRATION_FILE }}" --dir /etc/prod-template/migrations
        '

    - name: Delete Old Migration Files on Production Server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }} '
          LATEST_MIGRATION="${{ env.LATEST_MIGRATION_FILE }}"
          cd /etc/prod-template/migrations
          
          for file in *.sql; do
            version="${file%%-*}"
            if [[ "$version" > "$LATEST_MIGRATION" ]]; then
              echo "Deleting file: $file"
              rm "$file"
            fi
          done
        '
      env:
        LATEST_MIGRATION_FILE: ${{ env.LATEST_MIGRATION_FILE }}

    - name: Deploy Systemd File
      run: |
        scp -o StrictHostKeyChecking=no init/prod-template.service ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }}:/etc/systemd/system/prod-template.service

    - name: Copy Migration Config
      run: |
        scp -o StrictHostKeyChecking=no ./dbconfig.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }}:/etc/prod-template/dbconfig.yml

    - name: Reload systemd, journald, and restart API
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }} '
          sudo systemctl daemon-reload && \
          sudo systemctl enable prod-template && \
          sudo systemctl restart systemd-journald && \
          sudo systemctl restart prod-template'

  deploy-caddy-config:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Caddy Config
      uses: actions/checkout@v2

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy Caddyfile
      run: |
        scp -o StrictHostKeyChecking=no config/Caddyfile ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }}:/etc/caddy/Caddyfile

    - name: Create systemd override file
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }} '
          sudo mkdir -p /etc/systemd/system/caddy.service.d && \
          echo "[Service]
          Environment=\"CADDY_DOMAIN=${{ secrets.DOMAIN }}\"
          Environment=\"CADDY_HOST=${{ secrets.HOST }}\"
          Environment=\"CADDY_PORT=${{ secrets.PORT }}\"
          " | sudo tee /etc/systemd/system/caddy.service.d/override.conf > /dev/null'

    - name: Reload systemd and restart Caddy
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }} '
          sudo systemctl daemon-reload && \
          sudo systemctl restart caddy'

  deploy-promtail-config:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Promtail Config
      uses: actions/checkout@v2

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Copy Promtail Config
      run: |
        scp -o StrictHostKeyChecking=no ./config/promtail-config.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }}:/etc/promtail/config.yml
    
    - name: Inject environment variables and restart Promtail
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }} '
          export PROMTAIL_PORT=${{ secrets.PROMTAIL_PORT }} && \
          export LOKI_SERVER_URL=${{ secrets.LOKI_SERVER_URL }} && \
          envsubst < /etc/promtail/config.yml > /etc/promtail/config.yml.tmp && \
          mv /etc/promtail/config.yml.tmp /etc/promtail/config.yml'

    - name: Restart Promtail
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }} '
          sudo systemctl daemon-reload && \
          sudo systemctl restart promtail'
